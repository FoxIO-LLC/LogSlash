# Copywrite (c) 2022, JA1, Inc.
# All rights reserved.
# Licenced under Polyform Internal Use
# For full license text, see LICENSE file in the repo root or https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Internal-Use-1.0.0.txt

[sources.in]
# Define your source here. https://vector.dev/docs/reference/configuration/sources/
type = "file"
include = [ "conn.log" ]
read_from = "beginning"
ignore_checkpoints = true

[transforms.pipe1]
type = "remap"
inputs = ["in"]
source = '''
# Parsing for JSON Logs
        . = parse_json!(.message)
# Cleaning up messages
        del(.message)
        .id.orig_h = ."id.orig_h"
        .id.resp_h = ."id.resp_h"
        .id.resp_p = ."id.resp_p"
        .id.orig_p = ."id.orig_p"
# Converting start from epoch to timestamp
        .timestamp = to_timestamp!(.ts)
        .timestamp_end = .timestamp
# Setting our LogSlash timewindow to every minute on the minute based on the timestamp
        .timewindow, err = format_timestamp(.timestamp, format: "%F%R")
# Setting our LogSlash counter
        .logslash = 1
# Cleaning up epoch times
        del(.ts)
'''

[transforms.pipe2]
# Filtering out empty logs
type = "filter"
inputs = ["pipe1"]
condition.type = "vrl"
condition.source =  """
        .uid != null
"""

[transforms.pipe3]
type = "reduce"
inputs = ["pipe2"]
# Hold events in memory for 1 minute before moving to the next pipe.
# This setting is for streaming inputs. If you are running logslash on a flat
# file, this setting will delay the output by 1 minute.
expire_after_ms = 60000
# Defining the fields to deduplicate by, "timewindow" is required for LogSlash to function
group_by = [ "timewindow", "id.orig_h", "id.resp_h", "id.resp_p", "proto" ]
# Performing transforms on the data to retain log value while reducing logs
merge_strategies.duration = "sum"
merge_strategies.orig_bytes = "sum"
merge_strategies.resp_bytes = "sum"
merge_strategies.missed_bytes = "sum"
merge_strategies.orig_pkts = "sum"
merge_strategies.orig_ip_bytes = "sum"
merge_strategies.resp_pkts = "sum"
merge_strategies.resp_ip_bytes = "sum"
# Discarding all srcport except for the first srcport
merge_strategies."id.orig_p" = "discard"
merge_strategies."id.resp_p" = "flat_unique"
merge_strategies.uid = "discard"
# Discarding all timestamps except for the first timestamp
merge_strategies.timestamp = "discard"
# Discarding all end timestamps except for the last timestamp
merge_strategies.timestamp_end = "retain"
merge_strategies.proto = "flat_unique"
merge_strategies.service = "flat_unique"
merge_strategies.conn_state = "flat_unique"
# Counting how many logs have been reduced by LogSlash
merge_strategies.logslash = "sum"

[transforms.pipe4]
# Cleaning up the timewindow field
type = "remap"
inputs = ["pipe3"]
source = '''
        del(.timewindow)
'''

[sinks.out]
# Define your output here. https://vector.dev/docs/reference/configuration/sinks/
inputs = ["pipe4"]
type = "console"
encoding.codec = "json"